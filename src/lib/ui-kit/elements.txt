import * as React from "react";
import { classNames } from '../utils';
import { funcAsComponentClass, FuncComponent } from '../../organicUI';
declare const h: any;
export function Tiles(p: any) {
    let children = p.children instanceof Array ? p.children : [p.children];
    children = children.filter(vdom => vdom instanceof Object);
    return (<div className="tiles">
        {children.map(vdom => (<div className="col-md-12 col-sm-4">{vdom}</div>))}
    </div>);
}

export function Box(p: { header: any, children: any, footer: any }) {
    return <div className="box">
        {!!p.header && <header className="box-header">{p.header}</header>}
        {!!p.header && <hr />}
        {p.children}
        {!!p.footer && <footer className="box-footer">
            {p.footer}
        </footer>}
    </div>
}
interface IButtonProps {
    children: any;
    isLoading?: boolean;
    type?: 'primary' | 'link' | 'info' | 'success' | 'warning' | 'danger';
    size?: 'small' | 'medium' | 'large';
    onClick?: () => Promise<any>;
    fixedWidth?:boolean;
    className?:string;
}
const buttonElement: FuncComponent<IButtonProps, IButtonProps> = (p, s, repatch) => (
    <FabricUI.DefaultButton  className={classNames( p.className, p.fixedWidth && 'is-fixed-width',s.isLoading && 'is-loading', p.type && 'is-' + p.type, p.size && 'is-' + p.size)}
        onClick={e => {
            e.preventDefault();
            repatch({ isLoading: 1 });
            const result = p.onClick();
            result && result.then && result.then(r => repatch({ isLoading: 0 }));
            !result && repatch({isLoading:false});
        }}>
        {!!s.isLoading  && p.children}
    </FabricUI.DefaultButton>);
export const    Button = funcAsComponentClass<IButtonProps,any>(buttonElement);
interface INotificationProps {
    children: any;
    type: 'primary' | 'link' | 'info' | 'success' | 'warning' | 'danger';
    onClick: () => void;
}
export function Notification(p: INotificationProps) {
    return <div className={`notification is-${p.type}`}>
        <button className="delete" onClick={p.onClick}></button>
        {p.children}
    </div>
}
interface IProgressProps {
    value: number;
    max: number;
    size?: 'small' | 'medium' | 'large';
    type?: 'primary' | 'link' | 'info' | 'success' | 'warning' | 'danger';
}
export function Progress(p: IProgressProps) {
    return <progress
        className={classNames('progress', p.type && 'is-' + p.type, p.size && 'is-' + p.size)}
        value={p.value + ''}
        max={p.max + ''}>{p.value + '%'}</progress>
}
interface ITagProps {
    children: any;
    type?: 'primary' | 'link' | 'info' | 'success' | 'warning' | 'danger';
    size?: 'small' | 'medium' | 'large';
    onDelete: () => void;
}
export function Tag(p: ITagProps) {
    return (<div className="control">
        <div className="tags has-addons">
            <a className={classNames('tag', p.type && `is-${p.type}`, p.size && 'is-' + p.size)}>{p.children}</a>
            {p.onDelete instanceof Function &&
                <a onClick={e => (e.preventDefault(), p.onDelete())} className="tag is-delete"></a>}
        </div>
    </div>);
}
interface ITagsProps {
    tags: any[];
    onDelete: (tag: any) => void;
}
export function Tags(p: ITagsProps) {
    return (<div className="tags has-addons">
        {p.tags.filter(x => !!x).map(tag => ([
            <span className="tag is-danger">{tag}</span>,
            <a className="tag is-delete" onClick={e => (e.preventDefault(), p.onDelete(tag))}></a>])
        )})}
  </div>);
}
export function Title(p: { children: any; level: number }) {
    return <div className={classNames("title", 'is-' + p.level)}>{p.children}</div>
}
export function Subtitle(p: { children: any; level: number }) {
    return <div className={classNames("subtitle", 'is-' + p.level)}>{p.children}</div>
}
export function Content(p: { children: any }) {
    return <div className="content">{p.children}</div>
}
export interface IDocumentTitle {
    title: string;
}
export function DocumentTitle(p: IDocumentTitle) {
    document.title = p.title;
    return <span className="document-title" style={{ display: 'none' }}>{p.title}</span>
}